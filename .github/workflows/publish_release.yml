name: "Publish new release"

on:
  push:
    tags:
      - v[0-9]+.*
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    name: Build wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - uses: actions/checkout@v2

      - name: Get history and tags for SCM versioning to work
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Extract version from tag name
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME="${GITHUB_REF/refs\/tags\//}"
          VERSION=${TAG_NAME#v}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for release branches)
        if:  github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          git tag v${RELEASE_VERSION}

      - name: Extract version from branch name (for hotfix branches)
        if: github.event_name == 'pull_request'  && startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          git tag v${RELEASE_VERSION}

      - name: Build wheel
        run: |
          python -m pip install build wheel
          python -m build --wheel --sdist

      - name: Check metadata
        run: |
          python3 -m pip install twine --prefer-binary
          python3 -m twine check dist/*

      # Code below inspired from this action:
      # - uses: taiki-e/create-gh-release-action@v1
      #   with:
      #     title: cmake-pre-commit-hooks $tag
      #     changelog: CHANGELOG.md
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        env:
          target: x86_64-unknown-linux-musl
          parse_changelog_tag: v0.3.0
          changelog: CHANGELOG.md
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # https://github.com/taiki-e/parse-changelog
          curl -LsSf "https://github.com/taiki-e/parse-changelog/releases/download/${parse_changelog_tag}/parse-changelog-${target}.tar.gz" | tar xzf -
          notes=$(./parse-changelog "${changelog}" "${RELEASE_VERSION}")
          rm -f ./parse-changelog
          if [[ "${tag}" =~ ^v?[0-9\.]+-[a-zA-Z_0-9\.-]+(\+[a-zA-Z_0-9\.-]+)?$ ]]; then
            prerelease="--prerelease"
          fi
          gh release create "v${RELEASE_VERSION}" ${prerelease:-} --title "cmake-pre-commit-hooks v${RELEASE_VERSION}" --notes "${notes:-}" dist/*

      - name: Setup Python for Pypi upload
        uses: actions/setup-python@v2

      - name: Publish standard package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          packages_dir: dist/
